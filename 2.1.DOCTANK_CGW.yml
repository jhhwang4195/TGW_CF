AWSTemplateFormatVersion: "2010-09-09"
Description: "This is the data center automation configuration of the OCTANK virtual company.5 VPCs, 2AZs, 10.0.0.0/8"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - AvailabilityZoneA
          - AvailabilityZoneB

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC.- Default Region : ap-northeast-2"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2"
  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC.- Default Region : ap-northeast-2"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2"

# AZ Parameters

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC.- Default Region : ap-northeast-2"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2"
  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC.- Default Region : ap-northeast-2"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2"

# ec2 images

Mappings:
  RegionMap:
    'ap-northeast-2':
      AMI: "ami-0e956abc893b8fdc2"
    'us-east-1':
      AMI: "ami-09bf161a067c3055c"

Resources:

  # COCTANK Resources
  VPCCOCTANK:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.8.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: BOCTANK
        - Key: project
          Value: OCTANK

# Create VPCCOCTANK-PublicSubnet A

  PublicSubnetACOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCOCTANK
      CidrBlock: "10.8.0.0/22"
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: COCTANK-Pub-A Subnet

# Create VPCCOCTANK-PublicSubnet B

  PublicSubnetBCOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCOCTANK
      CidrBlock: "10.8.4.0/22"
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: COCTANK-Pub-B Subnet

# Create VPCCOCTANK-Public Route Table

  PublicSubnetRouteTableCOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCOCTANK
      Tags:
        - Key: Name
          Value: COCTANK-Public RT

# Public A Subnet Accsociate VPCCOCTANK-Public Route Table

  PublicASubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTableCOCTANK
      SubnetId: !Ref PublicSubnetACOCTANK

# Public B Subnet Accsociate VPCCOCTANK-Public Route Table

  PublicBSubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTableCOCTANK
      SubnetId: !Ref PublicSubnetBCOCTANK

# Create VPCCOCTANK-PrivateSubnet A

  PrivateSubnetACOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCOCTANK
      CidrBlock: "10.8.8.0/21"
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: COCTANK-Priv-A Subnet

# Create VPCCOCTANK-PrivateSubnet B

  PrivateSubnetBCOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref: VPCCOCTANK
      CidrBlock: "10.8.16.0/21"
      AvailabilityZone: !Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: COCTANK-Priv-B Subnet

# Create VPCCOCTANK-Private Route Table

  PrivateSubnetRouteTableCOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCOCTANK
      Tags:
        - Key: Name
          Value: !Join ["-", [COCTANK, Ref: "AWS::StackName", Private-Route-Table]]

# Private A Subnet Accsociate VPCCOCTANK-Private Route Table

  PrivateASubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTableCOCTANK
      SubnetId: !Ref PrivateSubnetACOCTANK

# Private B Subnet Accsociate VPCCOCTANK-Private Route Table

  PrivateBSubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTableCOCTANK
      SubnetId: !Ref PrivateSubnetBCOCTANK

# VPC COCTANK ServerRole

  ServerRoleCOCTANK:
    Type: AWS::IAM::Role
    Properties:
      RoleName: COCTANK-SSMRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileCOCTANK:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRoleCOCTANK

# VPCCOCTANK Security Group - ICMP , SSH Permit 

  COCTANKEc2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH from 10.x.x.x
      GroupName: COCTANK-SG
      VpcId: !Ref VPCCOCTANK
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.4.0.0/16

# VPCCOCTANK EC2 Create

  ServerAEc2COCTANK:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetACOCTANK
    Properties:
      SubnetId:
        Ref: PrivateSubnetACOCTANK
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      PrivateIpAddress: 10.8.14.100
      InstanceType: t3.small
      SecurityGroupIds:
        - Ref: COCTANKEc2SecGroup
      IamInstanceProfile: !Ref InstanceProfileCOCTANK
      Tags:
        - Key: Name
          Value: COCTANK-Server-A

  ServerBEc2COCTANK:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetBCOCTANK
    Properties:
      SubnetId:
        Ref: PrivateSubnetBCOCTANK
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      PrivateIpAddress: 10.8.22.100
      InstanceType: t3.small
      SecurityGroupIds:
        - Ref: COCTANKEc2SecGroup
      IamInstanceProfile: !Ref InstanceProfileCOCTANK
      Tags:
        - Key: Name
          Value: COCTANK-Server-A

  AttachSubnetACOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCCOCTANK
      CidrBlock: "10.8.24.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: COCTANK-Attach-A Subnet

  AttachSubnetBCOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCCOCTANK
      CidrBlock: "10.8.25.0/24"
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: COCTANK-Attach-B Subnet

  AttachSubnetRouteTableCOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCOCTANK
      Tags:
        - Key: Name
          Value: COCTANK-Attach RT

  AttachASubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AttachSubnetRouteTableCOCTANK
      SubnetId: !Ref AttachSubnetACOCTANK

  AttachBSubnetRouteTableAssociatioAOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AttachSubnetRouteTableCOCTANK
      SubnetId: !Ref AttachSubnetBCOCTANK

  EndpointSecGroupCOCTANK:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for local VPC
      GroupName: !Join ["-", [COCTANK, Ref: "AWS::StackName", "vpc-sec-group"]]
      VpcId:
        Ref: VPCCOCTANK
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "1"
          ToPort: "65535"
          CidrIp: 10.8.0.0/16
        - IpProtocol: udp
          FromPort: "1"
          ToPort: "65535"
          CidrIp: 10.8.0.0/16

  SSMEndpointCOCTANK:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCCOCTANK
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetACOCTANK
        - Ref: AttachSubnetBCOCTANK
      SecurityGroupIds:
        - Ref: EndpointSecGroupCOCTANK

  SSMMEndpointCOCTANK:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCCOCTANK
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSMM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetACOCTANK
        - Ref: AttachSubnetBCOCTANK
      SecurityGroupIds:
        - Ref: EndpointSecGroupCOCTANK

  # Datacenter 1 Resources
  VPCDOCTANK:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.4.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName"]]
        - Key: project
          Value: OCTANK

  PublicSubnetADOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.0.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Pub-A-Subnet]]

  PublicSubnetBDOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.4.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Pub-B-Subnet]]

  PublicSubnetRouteTableDOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Public-Route-Table]]

  PublicASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTableDOCTANK
      SubnetId:
        Ref: PublicSubnetADOCTANK

  PublicBSubnetRouteTableAssociationDOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTableDOCTANK
      SubnetId:
        Ref: PublicSubnetBDOCTANK

  PrivateSubnetADOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.8.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Priv-A-Subnet]]

  PrivateSubnetBDOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.16.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Priv-B-Subnet]]

  PrivateSubnetRouteTableDOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Private-Route-Table]]

  PrivateASubnetRouteTableAssociationDOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTableDOCTANK
      SubnetId:
        Ref: PrivateSubnetADOCTANK

  PrivateBSubnetRouteTableAssociationDOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTableDOCTANK
      SubnetId:
        Ref: PrivateSubnetBDOCTANK

  ServerRoleDC:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [DOCTANK, Ref: "AWS::StackName", "SSMRole"]]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileDC:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRoleDC

  DOCTANKEc2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH from 10.x.x.x
      GroupName: !Join ["-", [DOCTANK, Ref: "AWS::StackName", "EC2-sec-group"]]
      VpcId:
        Ref: VPCDOCTANK
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.4.0.0/16

  ServerEc2DOCTANK:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetBDOCTANK
    Properties:
      SubnetId:
        Ref: PrivateSubnetBDOCTANK
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t3.small
      SecurityGroupIds:
        - Ref: DOCTANKEc2SecGroup
      IamInstanceProfile:
        Ref: InstanceProfileDC
      Tags:
        - Key: Name
          Value: !Sub "DOCTANK-${AWS::StackName}-Server"

  DCCloud9env:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: "Cloud9 environment for the running automation"
      AutomaticStopTimeMinutes: 60
      InstanceType: t2.large
      Name: !Sub "${AWS::StackName}"
      SubnetId: !Ref PublicSubnetADOCTANK
      Repositories:
        - PathComponent: /tgwwalk
          RepositoryUrl: https://github.com/geseib/tgwwalk

  AttachSubnetADOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.24.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Attach-A-Subnet]]

  AttachSubnetBDOCTANK:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      CidrBlock: "10.4.25.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Attach-B-Subnet]]

  AttachSubnetRouteTableDOCTANK:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", Attach-Route-Table]]

  AttachASubnetRouteTableAssociationDOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AttachSubnetRouteTableDOCTANK
      SubnetId:
        Ref: AttachSubnetADOCTANK

  AttachBSubnetRouteTableAssociationDOCTANK:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AttachSubnetRouteTableDOCTANK
      SubnetId:
        Ref: AttachSubnetBDOCTANK

  EndpointSecGroupDOCTANK:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for local VPC
      GroupName: !Join ["-", [DOCTANK, Ref: "AWS::StackName", "vpc-sec-group"]]
      VpcId:
        Ref: VPCDOCTANK
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 10.4.0.0/16
        - IpProtocol: udp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 10.4.0.0/16

  SSMEndpointDOCTANK:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetADOCTANK
        - Ref: AttachSubnetBDOCTANK
      SecurityGroupIds:
        - Ref: EndpointSecGroupDOCTANK

  SSMMEndpointDOCTANK:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSMM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetADOCTANK
        - Ref: AttachSubnetBDOCTANK
      SecurityGroupIds:
        - Ref: EndpointSecGroupDOCTANK

  InternetGatewayDOCTANK:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", IGW]]

  AttachGatewayDOCTANK:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCDOCTANK
      InternetGatewayId:
        Ref: InternetGatewayDOCTANK

  DirectInternetRouteDOCTANK:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayDOCTANK
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayDOCTANK
      RouteTableId:
        Ref: PublicSubnetRouteTableDOCTANK

  # DataCenter Services 1 Resources
  # This VPC holds shared Services for all
  VPCITOCTANK1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName"]]
        - Key: project
          Value: OCTANK

  PublicSubnetAITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.0.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Pub-A-Subnet]]

  PublicSubnetBITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.4.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Pub-B-Subnet]]

  PublicSubnetRouteTableITOCTANK1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Public-Route-Table]]

  PublicASubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: PublicSubnetAITOCTANK1

  PublicBSubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: PublicSubnetBITOCTANK1

  PrivateSubnetAITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.8.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Priv-A-Subnet]]

  PrivateSubnetBITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.16.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Priv-B-Subnet]]

  PrivateSubnetRouteTableITOCTANK1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Private-Route-Table]]

  PrivateASubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: PrivateSubnetAITOCTANK1

  PrivateBSubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: PrivateSubnetBITOCTANK1

  ServerRoleITOCTANK1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", "SSMRole"]]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileITOCTANK1:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRoleITOCTANK1

  ITOCTANK1Ec2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH from 10.x.x.x
      GroupName: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", "EC2-sec-group"]]
      VpcId:
        Ref: VPCITOCTANK1
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.4.0.0/16

  ServerEc2ITOCTANK1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetBITOCTANK1
    Properties:
      SubnetId:
        Ref: PrivateSubnetBITOCTANK1
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t3.small
      SecurityGroupIds:
        - Ref: ITOCTANK1Ec2SecGroup
      IamInstanceProfile:
        Ref: InstanceProfileITOCTANK1
      Tags:
        - Key: Name
          Value: !Sub "ITOCTANK1-${AWS::StackName}-Server"

  AttachSubnetAITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.24.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Attach-A-Subnet]]

  AttachSubnetBITOCTANK1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      CidrBlock: "10.0.25.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Attach-B-Subnet]]

  AttachSubnetRouteTableITOCTANK1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", Attach-Route-Table]]

  AttachASubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AttachSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: AttachSubnetAITOCTANK1

  AttachBSubnetRouteTableAssociationITOCTANK1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AttachSubnetRouteTableITOCTANK1
      SubnetId:
        Ref: AttachSubnetBITOCTANK1

  EndpointSecGroupITOCTANK1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for local VPC
      GroupName: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", "vpc-sec-group"]]
      VpcId:
        Ref: VPCITOCTANK1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "1"
          ToPort: "65535"
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          FromPort: "1"
          ToPort: "65535"
          CidrIp: 10.0.0.0/16

  SSMEndpointITOCTANK1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetAITOCTANK1
        - Ref: AttachSubnetBITOCTANK1
      SecurityGroupIds:
        - Ref: EndpointSecGroupITOCTANK1

  SSMMEndpointITOCTANK1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", SSMM]
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
        - Ref: AttachSubnetAITOCTANK1
        - Ref: AttachSubnetBITOCTANK1
      SecurityGroupIds:
        - Ref: EndpointSecGroupITOCTANK1

  ITOCTANK1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [DOCTANK, Ref: "AWS::StackName", IGW]]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCITOCTANK1
      InternetGatewayId:
        Ref: ITOCTANK1InternetGateway

  ITOCTANK1DirectInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: ITOCTANK1InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ITOCTANK1InternetGateway
      RouteTableId:
        Ref: PublicSubnetRouteTableITOCTANK1

  ITOCTANK1NATEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  ITOCTANK1NATGateway:
    DependsOn: AttachGateway
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ITOCTANK1NATEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetAITOCTANK1
      Tags:
        - Key: Name
          Value: !Join ["-", [ITOCTANK1, Ref: "AWS::StackName", NATGW]]

  ITOCTANK1NATInternetRouteAttach:
    Type: AWS::EC2::Route
    DependsOn: ITOCTANK1InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: ITOCTANK1NATGateway
      RouteTableId:
        Ref: AttachSubnetRouteTableITOCTANK1

  ITOCTANK1NATInternetRoutePrivate:
    Type: AWS::EC2::Route
    DependsOn: ITOCTANK1InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: ITOCTANK1NATGateway
      RouteTableId:
        Ref: PrivateSubnetRouteTableITOCTANK1

Outputs:
  # Non-Prod 1 Outputs
  VPCAOCTANK:
    Description: "The Created VPC"
    Value: !Ref VPCAOCTANK
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}"

  AttachSubnetAAOCTANK:
    Description: "AOCTANK Attach Subnet A"
    Value: !Ref AttachSubnetAAOCTANK
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}-Attach-Subnet"
  AttachSubnetBAOCTANK:
    Description: "AOCTANK Attach Subnet B"
    Value: !Ref AttachSubnetBAOCTANK
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}-Attach-B-Subnet"
  PrivateSubnetRouteTableAOCTANK:
    Description: "AOCTANK Private Route Table"
    Value: !Ref PrivateSubnetRouteTableAOCTANK
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}-Private-Route-Table"

  ServerAOCTANKA:
    Description: "AOCTANK EC2 IP address"
    Value: !GetAtt ServerEc2ANP.PrivateIp
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}-ServerIP-A"

  ServerAOCTANKB:
    Description: "AOCTANK EC2 IP address"
    Value: !GetAtt ServerEc2BNP.PrivateIp
    Export:
      Name: !Sub "AOCTANK-${AWS::StackName}-ServerIP-B"

  # Non-Prod 2 Outputs
  VPCBOCTANK:
    Description: "The Created VPC"
    Value: !Ref VPCBOCTANK
    Export:
      Name: !Sub "BOCTANK-${AWS::StackName}-VPC"

  AttachSubnetABOCTANK:
    Description: "BOCTANK Attach Subnet A"
    Value: !Ref AttachSubnetABOCTANK
    Export:
      Name: !Sub "BOCTANK-${AWS::StackName}-Attach-A-Subnet"
  AttachSubnetBBOCTANK:
    Description: "BOCTANK Attach Subnet B"
    Value: !Ref AttachSubnetBBOCTANK
    Export:
      Name: !Sub "BOCTANK-${AWS::StackName}-Attach-B-Subnet"
  PrivateSubnetRouteTableBOCTANK:
    Description: "BOCTANK Private Route Table"
    Value: !Ref PrivateSubnetRouteTableBOCTANK
    Export:
      Name: !Sub "BOCTANK-${AWS::StackName}-Private-Route-Table"

  ServerBOCTANK:
    Description: "BOCTANK EC2 IP address"
    Value: !GetAtt ServerEc2BOCTANK.PrivateIp
    Export:
      Name: !Sub "BOCTANK-${AWS::StackName}-ServerIP"

  # Prod 1 Outputs
  VPCCOCTANK:
    Description: "The Created VPC"
    Value: !Ref VPCCOCTANK
    Export:
      Name: !Sub "COCTANK-${AWS::StackName}-VPC"

  AttachSubnetACOCTANK:
    Description: "COCTANK Attach Subnet A"
    Value: !Ref AttachSubnetACOCTANK
    Export:
      Name: !Sub "COCTANK-${AWS::StackName}-Attach-A-Subnet"
  AttachSubnetBCOCTANK:
    Description: "COCTANK Attach Subnet B"
    Value: !Ref AttachSubnetBCOCTANK
    Export:
      Name: !Sub "COCTANK-${AWS::StackName}-Attach-B-Subnet"
  PrivateSubnetRouteTableCOCTANK:
    Description: "COCTANK Private Route Table"
    Value: !Ref PrivateSubnetRouteTableCOCTANK
    Export:
      Name: !Sub "COCTANK-${AWS::StackName}-Private-Route-Table"

  ServerCOCTANK:
    Description: "COCTANK EC2 IP address"
    Value: !GetAtt ServerEc2ITOCTANK1.PrivateIp
    Export:
      Name: !Sub "COCTANK-${AWS::StackName}-ServerIP"

  # Datacenter 1 Outputs
  VPCDOCTANK:
    Description: "The Created VPC"
    Value: !Ref VPCDOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-VPC"

  DOCTANKServerSession:
    Description: session command for Server
    Value:
      Fn::Join:
        - " "
        - - "aws ssm start-session --target"
          - !Ref ServerEc2DOCTANK

  PublicSubnetADOCTANK:
    Description: "DOCTANK Public Subnet A"
    Value: !Ref PublicSubnetADOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Pub-A-Subnet"
  PublicSubnetBDOCTANK:
    Description: "DOCTANK Public Subnet B"
    Value: !Ref PublicSubnetBDOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Pub-B-Subnet"
  PrivateSubnetADOCTANK:
    Description: "DOCTANK Private Subnet A"
    Value: !Ref PrivateSubnetADOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Priv-A-Subnet"
  PrivateSubnetBDOCTANK:
    Description: "DOCTANK Private Subnet B"
    Value: !Ref PrivateSubnetBDOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Priv-B-Subnet"
  PrivateSubnetRouteTableDOCTANK:
    Description: "AOCTANK Private Route Table"
    Value: !Ref PrivateSubnetRouteTableDOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Private-Route-Table"
  PublicSubnetRouteTableDOCTANK:
    Description: "AOCTANK Public Route Table"
    Value: !Ref PublicSubnetRouteTableDOCTANK
    Export:
      Name: !Sub "DOCTANK-${AWS::StackName}-Public-Route-Table"

  # Datacenter Services 1 Outputs
  VPCITOCTANK1:
    Description: "Datacenter Services VPC"
    Value: !Ref VPCITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}"

  AttachSubnetAITOCTANK11:
    Description: "ITOCTANK1 Attach Subnet A"
    Value: !Ref AttachSubnetAITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}-Attach-A-Subnet"
  AttachSubnetBITOCTANK1:
    Description: "ITOCTANK1 Attach Subnet B"
    Value: !Ref AttachSubnetBITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}-Attach-B-Subnet"
  PrivateSubnetAITOCTANK1:
    Description: "ITOCTANK1 Private Subnet A"
    Value: !Ref PrivateSubnetAITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}-Attach-A-Subnet"
  PrivateSubnetBITOCTANK1:
    Description: "ITOCTANK1 Private Subnet B"
    Value: !Ref PrivateSubnetBITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}-Attach-B-Subnet"
  PrivateSubnetRouteTableITOCTANK1:
    Description: "ITOCTANK1 Private Route Table"
    Value: !Ref PrivateSubnetRouteTableITOCTANK1
    Export:
      Name: !Sub "ITOCTANK1-${AWS::StackName}-Private-Route-Table"
